from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards.menu import main_menu, admin_menu, tariff_menu
from data.room_info import ABOUT_US, CONTACTS, GIFT_CERTIFICATE, TARIFFS
from data.stats import add_stat, get_daily_report
from data.states import BookingForm
from config import ADMIN_ID

router = Router()

@router.message(Command("start"))
async def start_handler(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í–æ—Ç —Ç–≤–æ—ë –º–µ–Ω—é:", reply_markup=admin_menu)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É —è—Ä–æ—Å—Ç–∏! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=main_menu)

@router.message(lambda msg: msg.text == "üìä –û—Ç—á—ë—Ç")
async def admin_report_button(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        report = get_daily_report()
        await message.answer(report)

@router.message(lambda msg: msg.text == "üî• –û –Ω–∞—Å")
async def about_us_handler(message: types.Message):
    await message.answer(ABOUT_US)

@router.message(lambda msg: msg.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_handler(message: types.Message):
    await message.answer(CONTACTS)

@router.message(lambda msg: msg.text == "üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
async def certificate_handler(message: types.Message):
    add_stat("certificates")
    photo = FSInputFile("images/certificate.jpg")
    button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ö—É–ø–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", url="https://mydestroy.ru/sertificates")]
        ]
    )
    await message.answer_photo(photo=photo, caption=GIFT_CERTIFICATE, reply_markup=button)

@router.message(lambda msg: msg.text == "üí• –¢–∞—Ä–∏—Ñ—ã")
async def show_tariffs_menu(message: types.Message):
    add_stat("tariffs")
    await message.answer("–£ –Ω–∞—Å –µ—Å—Ç—å 4 —Ç–∞—Ä–∏—Ñ–∞, –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_menu)

@router.message(lambda msg: msg.text in TARIFFS)
async def show_tariff_info(message: types.Message):
    add_stat("bookings")
    name = message.text
    data = TARIFFS[name]
    text = f"üì¶ <b>{name}</b>\n\nüí∞ –¶–µ–Ω–∞: {data['price']}\n\nüßæ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n{data['details']}"
    photo = FSInputFile(data["photo"])
    booking_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url="https://n235102.yclients.com")]
        ]
    )
    await message.answer_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=booking_button)

@router.message(lambda msg: msg.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    add_stat("questions")
    await message.answer("üì© –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç!")

# üöö –í—ã–µ–∑–¥–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚Äî –Ω–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏
@router.message(lambda msg: msg.text == "üöö –í—ã–µ–∑–¥–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞")
async def start_booking(message: types.Message, state: FSMContext):
    await message.answer("üöö –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n\nüìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")
    await state.set_state(BookingForm.city)

@router.message(BookingForm.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(BookingForm.date)

@router.message(BookingForm.date)
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("üë• –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π?")
    await state.set_state(BookingForm.guests)

@router.message(BookingForm.guests)
async def process_guests(message: types.Message, state: FSMContext):
    await state.update_data(guests=message.text)
    await message.answer("üì¶ –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é), –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤':")
    await state.set_state(BookingForm.comment)

@router.message(BookingForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    text = f"""üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–µ–∑–¥–Ω—É—é –∫–æ–º–Ω–∞—Ç—É:

üìç –ì–æ—Ä–æ–¥: {data['city']}
üìÖ –î–∞—Ç–∞: {data['date']}
üë• –ì–æ—Å—Ç–µ–π: {data['guests']}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}

–û—Ç–ø—Ä–∞–≤–∏–ª: @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {message.from_user.id})
"""
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await message.bot.send_message(ADMIN_ID, text)
    await state.clear()

@router.message(lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É)
@router.message()
async def forward_question_to_admin(message: types.Message):
    if message.chat.type == "private" and message.from_user.id != ADMIN_ID:
        user = message.from_user
        text = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {user.id}):\n\n{message.text}"
        await message.bot.send_message(chat_id=ADMIN_ID, text=text)
